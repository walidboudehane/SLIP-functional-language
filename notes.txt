################## Comprendre la donnee ##############################
(let ((y 10) ((div2 x) (/ x 2))) (div2 y))

* écrire une fonction s2l qui va “éliminer” le sucre syntaxique
################## Partie importantes du code ########################



################## Ecrire un rapport ##################################

- On a fait une recherche sur lisp pour pouvoir comprendre le comportement de slip qui est assez similaire a lisp.
- comprehension de l'analyseur lexical 
- comprehension de l'analyseur syntaxique
- au debut nous avions pas compris la relation entre les Sexp, Lexp, Dexp et eval mais avec plusieur lectures de l'enonce et du code fourni et un peu d'essai et d'erreur on est arrive a comprendre la relation chainee entre eux ...
- on était coincé dans l'elimination du sucre syntaxique et l'implementation de la fonction s2l pendant plusieurs jours jusqu'a a ce qu'on parle avec un demonstrateur qui nous a donné l'idée de créer une fonction auxiliaire qui nous aiderait a faire l'expansion des expressions pour s2l.

- Apres une longue bataille avec les Scons et les parentheses pour eliminer le sucre syntaxique d'une lambda expression, non avons enfin trouvé notre solution dans un simple sexpOf qui nous a éluminé en nous faisant remarquer qu'il y avait deux Scons different apres le "fn" et non pas un Scons imbriqué dans un autre.

- nous avons reussi a faire marcher "let" mais uniquement pour une seule declaration de variable

**** Problemes rencontrees ***
- comprehension de la fonction match
- elimination du sucre syntaxique (expansion des scons)
- ordre de d'appel des fonctions 


*** Surprises ***

- nous n'avions pas remarque que l2d utilisait [Var] et que eval utilisait [Val], nous croyons que c'etait comme nous faisons dans les demo et que nous utilisions des Env directement, mais apres quelques message d'erreur du compilateur nous avons remarque qu'il ne falait pas utiliser des Env dans l2d et eval

- pour un appel de fonction nous étions habitué a le voir dans les demonstations de la forme "Dcall (Dcall (Dref 0) (Dnum 2)) (Dnum 3))" mais dans ce TP la structure des expression était differente "Dcall (Dref 0) (Dcall (Dnum 2) (Dnum 3))" et cela nous a vraiment fait galerer pour l'évaluer.

*** choix qu'on a du faire ***
- Pour trouver les indices des variables dans l'environement nous avons utilisé une fonction auxiliaire findIndexVar mais nous avons opté a mettre une liste d'entiers prédéfinie pour relier chaque variable a un index (meme si on sait que ce n'est pas vraiment faisable mais c'est tout ce qu'on a trouvé pour le moment histoire de ne pas perdre d'avantage de temps)

- Pour remedier au Probleme d'expansion des expressions dans s2l, nous avons implementé la fonction auxiliaire "sexpand" pour s2l et "lexpand" pour l2d.

- pour evaluer une expression de la forme "Dcall (Dref 0) (Dcall (Dnum 2) (Dnum 3))" nous avons implementé la fonction tupleArgs qui prend un Dexp et retourn une pair de Dexp. On s'est inspiré de la solution de l'exercice de la démo 3 mais nous avons choisi d'utiliser deux Vfuns, Valf et Valf2. Valf evalue la fonction et Valf2 prend evalue Valf et la premier Dexp de la pair et finalement nous evaluons Valf2 avec le deuxieme element de la paire.

*** options qu'on a rejetes ***
